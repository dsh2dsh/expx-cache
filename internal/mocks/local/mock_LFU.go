// Code generated by mockery. DO NOT EDIT.

package local

import (
	tinylfu "github.com/dsh2dsh/go-tinylfu"
	mock "github.com/stretchr/testify/mock"
)

// MockLFU is an autogenerated mock type for the LFU type
type MockLFU struct {
	mock.Mock
}

type MockLFU_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLFU) EXPECT() *MockLFU_Expecter {
	return &MockLFU_Expecter{mock: &_m.Mock}
}

// Del provides a mock function with given fields: key
func (_m *MockLFU) Del(key string) {
	_m.Called(key)
}

// MockLFU_Del_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Del'
type MockLFU_Del_Call struct {
	*mock.Call
}

// Del is a helper method to define mock.On call
//   - key string
func (_e *MockLFU_Expecter) Del(key interface{}) *MockLFU_Del_Call {
	return &MockLFU_Del_Call{Call: _e.mock.On("Del", key)}
}

func (_c *MockLFU_Del_Call) Run(run func(key string)) *MockLFU_Del_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLFU_Del_Call) Return() *MockLFU_Del_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLFU_Del_Call) RunAndReturn(run func(string)) *MockLFU_Del_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: key
func (_m *MockLFU) Get(key string) (any, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 any
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (any, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) any); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockLFU_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockLFU_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key string
func (_e *MockLFU_Expecter) Get(key interface{}) *MockLFU_Get_Call {
	return &MockLFU_Get_Call{Call: _e.mock.On("Get", key)}
}

func (_c *MockLFU_Get_Call) Run(run func(key string)) *MockLFU_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockLFU_Get_Call) Return(_a0 any, _a1 bool) *MockLFU_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLFU_Get_Call) RunAndReturn(run func(string) (any, bool)) *MockLFU_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: _a0
func (_m *MockLFU) Set(_a0 *tinylfu.Item) {
	_m.Called(_a0)
}

// MockLFU_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockLFU_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - _a0 *tinylfu.Item
func (_e *MockLFU_Expecter) Set(_a0 interface{}) *MockLFU_Set_Call {
	return &MockLFU_Set_Call{Call: _e.mock.On("Set", _a0)}
}

func (_c *MockLFU_Set_Call) Run(run func(_a0 *tinylfu.Item)) *MockLFU_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*tinylfu.Item))
	})
	return _c
}

func (_c *MockLFU_Set_Call) Return() *MockLFU_Set_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockLFU_Set_Call) RunAndReturn(run func(*tinylfu.Item)) *MockLFU_Set_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLFU creates a new instance of MockLFU. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLFU(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLFU {
	mock := &MockLFU{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
